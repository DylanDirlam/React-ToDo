{"version":3,"sources":["Components/TodoItem.js","Components/TodoNew.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItemTest","props","toggleComplete","setState","prevState","completed","handleEdit","event","description","target","value","handleBlur","_removeItem","state","id","handleKeyDown","keyCode","blur","editMode","this","className","type","checked","onChange","onBlur","onKeyDown","placeholder","onClick","icon","faTrash","Component","TodoNew","handleChange","handleSubmit","_addItem","Date","now","faPlusCircle","TodoList","item","items","filter","List","map","key","App","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f5dbe5e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class TodoItemTest extends Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      id: props.id,\r\n      description: props.description || 'N/A',\r\n      editMode: false,\r\n      completed: props.completed || false\r\n    }\r\n  }\r\n\r\n  toggleComplete = () => {\r\n    this.setState((prevState, props) => ({\r\n      completed: !prevState.completed\r\n    }))\r\n  }\r\n\r\n  handleEdit = (event) => {\r\n    this.setState({\r\n      description: event.target.value\r\n    })\r\n  }\r\n\r\n  handleBlur = (event) => {\r\n    if (event.target.value === '') {\r\n      this._removeItem(this.state.id)\r\n    }\r\n  }\r\n\r\n  handleKeyDown = (event) => {\r\n    if (event.keyCode !== 13) return\r\n    event.target.blur()\r\n  }\r\n\r\n  _removeItem() {\r\n    this.props._removeItem(this.state.id)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div \r\n        className=\"p-2 flex justify-between hover:bg-gray-800\"\r\n      >\r\n        <input \r\n            type=\"checkbox\"\r\n            className=\"w-8 h-8 align-middle\"\r\n            checked={this.state.completed}\r\n            onChange={this.toggleComplete}\r\n          />\r\n        <input \r\n            type=\"text\" \r\n            className={`text-lg px-2 h-8 flex-auto align-middle bg-transparent text-white ${this.state.completed ? 'line-through text-gray-500' : ''} outline-none`}\r\n            onChange={this.handleEdit}\r\n            onBlur={this.handleBlur}\r\n            onKeyDown={this.handleKeyDown}\r\n            value={this.state.description}\r\n            placeholder='Empty todo item'\r\n          />\r\n        <button \r\n          className=\"align-middle active:shadow-outline\"\r\n          onClick={() => { this._removeItem()}}\r\n        >\r\n          <FontAwesomeIcon icon={faTrash} />\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class TodoNew extends Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      value: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    if (event.keyCode !== 13) return\r\n    this._addItem()\r\n  }\r\n  \r\n  _addItem = () => {\r\n    this.props._addItem({\r\n      id: Date.now(),\r\n      description: this.state.value,\r\n      completed: false\r\n    })\r\n    this.setState({\r\n      value: ''\r\n    })\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"p-2 border-b border-gray-800 flex justify-between\">\r\n        <input \r\n          type=\"text\"\r\n          className=\"flex-auto bg-transparent px-2 py-1 mt-1 outline-none\"\r\n          placeholder=\"Enter new todo item\"\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleSubmit}\r\n        />\r\n        <button\r\n          onClick={this._addItem}\r\n        >\r\n          <FontAwesomeIcon icon={faPlusCircle} />\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport TodoNew from './TodoNew';\r\n\r\nexport default class TodoList extends Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      items: []\r\n    }    \r\n  }\r\n\r\n  _removeItem(id) {\r\n    this.setState({\r\n      items: this.state.items.filter(item => item.id !== id)\r\n    })\r\n  }\r\n\r\n  _addItem = (item) => {\r\n    this.setState({\r\n      items: [...this.state.items, item]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const List = this.state.items.map(item => \r\n      <TodoItem\r\n        key={item.id}\r\n        id={item.id}\r\n        description={item.description}\r\n        completed={item.completed}\r\n        _removeItem={() => {this._removeItem(item.id)}}\r\n      />\r\n    )\r\n    return (\r\n      <div>\r\n        <div className=\"divide-y divide-gray-700\">\r\n          {List}\r\n        </div>\r\n        <TodoNew _addItem={(item) => {this._addItem(item)}} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport TodoList from './Components/TodoList'\n\nfunction App() {\n  return (\n    <div className=\"bg-gray-800 w-full h-screen text-gray-100 fixed\">\n      <div className=\"p-4 mt-0 sm:p-8 lg:container lg:mt-8 lg:mx-auto bg-gray-900\">\n        <h1 className=\"text-4xl font-semibold pb-2\">Basic Todo App</h1>\n        <TodoList />\n      </div>\n      <div className=\"mt-1 text-center text-sm tracking-wide\">\n        Built with <a className=\"hover:underline text-blue-300\" href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> & <a className=\"hover:underline text-teal-600\" href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind CSS</a> &bull; 2020 &copy; <a className=\"hover:underline\" href=\"https://dirlam.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Dylan Dirlam</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}